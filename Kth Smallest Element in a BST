Given the root of a binary search tree, and an integer k, return the kth smallest value (1-indexed) of all the values of the nodes in the tree.

Example 1:

Input: root = [3,1,4,null,2], k = 1
Output: 1
Example 2:

Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

----------------------------------------------------------------------------------------------------------------------------------------------

Approach 1: TC-O(N^logN) SC-O(N)
Perform any DFS traversal (Preorder,post,inorder) and store values in vector and sort the vector and then return k-1 element

Approach 2: TC-O(N) SC-O(N) inorder traversal of BST returns sorted values which can be stored in Array and return k-1 element

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> res;
        inorder(root,res);
        return res[k-1];
    }
    void inorder(TreeNode* root,vector<int> &res){
        if(root==NULL)
            return;
        inorder(root->left,res);
        res.push_back(root->val);
        inorder(root->right,res);
    }
};

--------------------------------------------------------------------------------------------------------------------------------------------------
Approach 3 : TC O(N) SC-O(1), instead of vector , make a counter variable
