/*
Given an unsorted integer array nums, find the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.


Example 1:

Input: nums = [1,2,0]
Output: 3
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1

Input: nums = [1,1]
Output: 2
*/

//O(nlogn) - sort and check if A[i]==i+1, if not return i+1
//O(n) space & time - use hashmap or A[max] array
//O(n) time & O(1) space - mark value at visited index as -ve but this should would work for -ve and 0.

//O(N) time & O(1) space - place values such that nums[index]==index+1, return if not so

class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int i=0;
        while(i<nums.size()){
            if(nums[i]<1 || nums[i]>nums.size())
                i++;
            else if(nums[i]!=i+1 && nums[nums[i]-1]!=nums[i]){
                swap(nums[i],nums[nums[i]-1]);
            }
            else
                i++;
        }
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=i+1)
                return i+1;
        }
        return nums.size()+1;
    }
};
