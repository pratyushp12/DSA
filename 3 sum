/*
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

I/P : [-2,-2,-1,-1,-1,0,0,0,2,2,2] : test case(striver)


Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums = []
Output: []

Example 3:
Input: nums = [0]
Output: []
*/

//Naive O(n^3 logn) - use 3 loops and logn for inserting in set 

//Better O(n^2 logn) space O(n) using sets

//Best O(n^2) Space O(1) - take an element and use 2 pointer approach

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& num) {
        vector<vector<int>> res; 
        sort(num.begin(), num.end()); 
        
        for (int i = 0; i < (int)(num.size()-2); i++) {
            
            if (i == 0 || (i > 0 && num[i] != num[i-1])) {
                
                int l = i+1, h = num.size()-1, target = 0 - num[i];
                
                while (l < h) {
                    if (num[l] + num[h] == target) {
                        
                        vector<int> temp; 
                        temp.push_back(num[i]); 
                        temp.push_back(num[l]); 
                        temp.push_back(num[h]); 
                        res.push_back(temp);
                        
                        while (l < h && num[l] == num[l+1]) l++;
                        while (l < h && num[h] == num[h-1]) h--;
                        
                        l++; h--;
                    } 
                    else if (num[l] + num[h] < target) l++;
                    else h--;
               }
            }
        }
        return res;
    }
};
