/*
Given an integer array nums, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.

 

Example 1:

Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.
Example 2:

Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.

Input: nums = [-3,-1,-1]
Output: 3

*/

//O(n^2) - check for every subarray and update the result once product of subarray is greater

//O(N) - take minm=1,maxm=1 & product=INT_MIN(to store result). if arr[i]<0, then swap the value of minm & maxm and maxm to store max and minm to store minm of subarray

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        int minm=1,maxm=1,product=INT_MIN;
        for(int i=0;i<nums.size();i++){
            if(nums[i]<0){
                swap(minm,maxm);
            }
            maxm=max((maxm*nums[i]),nums[i]);
            minm=min((minm*nums[i]),nums[i]);
            product=max(product,maxm);
        }
        return product;
    }
};

