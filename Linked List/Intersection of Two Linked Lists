/*
Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

For example, the following two linked lists begin to intersect at node c1:

It is guaranteed that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.

Example 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.

Example 2:
Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).
From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.

Example 3:
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB
can be arbitrary values.
Explanation: The two lists do not intersect, so return null.
*/

//O(n^2) time & O(1) space - traverse LL1 and for each node check if it is in LL2
//O(n) time & O(n) space - use hashmap and insert all nodes of LL1 and for each node of LL2, check in the map if it exist


//O(n) time & O(1) space - calculate size of both LL and move pointers(size1-size2 or vice versa) which is larger and then move both the pointers till last and check if intersection
exist

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        if(!headA || !headB)
            return NULL;
        int c1=0,c2=0;
        ListNode *curr1=headA,*curr2=headB;
        while(headA){
            c1++;
            headA=headA->next;
        }
        while(headB){
            c2++;
            headB=headB->next;
        }
        if(c1>c2){
            for(int i=0;i<c1-c2;i++)
                curr1=curr1->next;
        }
        if(c2>c1){
           for(int i=0;i<c2-c1;i++)
                curr2=curr2->next; 
        }
        while(curr1 && curr2){
            if(curr1==curr2)
                return curr1;
            curr1=curr1->next;
            curr2=curr2->next;
        }
        return NULL;
    }
};

/* 2-pointer technique - O(n+m) time & O(1) space

Using Two pointers :

Initialize two pointers ptr1 and ptr2  at the head1 and  head2.
Traverse through the lists,one node at a time.
When ptr1 reaches the end of a list, then redirect it to the head2.
similarly when ptr2 reaches the end of a list, redirect it the head1.
Once both of them go through reassigning,hey will be equidistant from
 the collision point
If at any node ptr1 meets ptr2, then it is the intersection node.
After second iteration if there is no intersection node it returns NULL
*/

