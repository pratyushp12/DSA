/*
Given the head of a singly linked list, reverse the list, and return the reversed list.

 1 -> 2 -> 3
 3 -> 2 -> 1

Example 1:


Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]
Example 2:


Input: head = [1,2]
Output: [2,1]
Example 3:

Input: head = []
Output: []

*/

Iterative O(N) : prev=Null , currNext=curr, and move while curr>next!=Null and manipulate accordingly

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if(head==NULL)
            return head;
    ListNode *prev=NULL,*curr=head;
        while(curr->next){
            ListNode *currNext=curr->next;
            curr->next=prev;
            prev=curr;
            curr=currNext;
        }
        curr->next=prev;
        head=curr;
        return head;
        
    }
};


//O(N) Recursive : First reverse all the nodes after head. Then we need to set head to be the final node in the reversed list(so, need to store) .
//We simply set its next node in the original list (head -> next) to point to it and sets its next to NULL.

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        if (!head || !(head -> next)) {
            return head;
        }
        ListNode* node = reverseList(head -> next);
        head -> next -> next = head;
        head -> next = NULL;
        return node;
    }
};
