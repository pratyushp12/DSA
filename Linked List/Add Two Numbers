You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.

Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

//Addition logic

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        int carry=0,sum=0;
        ListNode *head=NULL;
        ListNode *curr=new ListNode(0);
        while(l1 || l2){
            if(l2==NULL)
            sum=(l1->val)+carry;
            else if(l1==NULL)
                sum=(l2->val)+carry;
            else
            sum=(l1->val)+(l2->val)+carry;
            curr->next=new ListNode(sum%10);
            carry=sum/10;
            curr=curr->next;
            if(head==NULL)
                head=curr;
            if(l1)
            l1=l1->next;
            if(l2)
            l2=l2->next;
        }
        if(carry==1)
            curr->next=new ListNode(1);
        return head;
    }
};
