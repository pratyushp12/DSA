Given a string s which represents an expression, evaluate this expression and return its value. 

The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of [-231, 231 - 1].

Note: You are not allowed to use any built-in function which evaluates strings as mathematical expressions, such as eval().

 

Example 1:

Input: s = "3+2*2"
Output: 7
Example 2:

Input: s = " 3/2 "
Output: 1
Example 3:

Input: s = " 3+5 / 2 "
Output: 5

--------------------------------------------------------------------------------------------------------------------------------------

Approach 1: Convert Infix to postfix and then evaluate the postfix expression.

Approach 2: Add '+' to the string. Take 2 values curr=0 && sign='+'. if operator(+,-) push into stack(op(curr)) . Dry Run the code for better understanding

class Solution {
public:
    long long int calculate(string s) {
        s+='+';
        stack<long long int> st;
        long long int n=s.length();
        long long int curr=0;
        char sign='+';
        for(long long int i=0;i<n;i++){
            if(s[i]==' ')
                continue;
            if(s[i]>='0' && s[i]<='9'){
                curr=curr*10+s[i]-'0';
            }
            else{
                if(sign=='+')
                    st.push(curr);
                else if(sign=='-')
                    st.push(-curr);
                else if(sign=='*'){
                    int ele=st.top();
                    st.pop();
                    st.push(ele*curr);
                }
                else if(sign=='/'){
                    int ele=st.top();
                    st.pop();
                    st.push(ele/curr);
                }
                curr=0;
                sign=s[i];
            }
        }
       long long int sum=0;
        while(!st.empty()){
            sum+=st.top();
            st.pop();
        }
        return sum;
    }
};
