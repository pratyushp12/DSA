Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the MinStack class:

MinStack() initializes the stack object.
void push(int val) pushes the element val onto the stack.
void pop() removes the element on the top of the stack.
int top() gets the top element of the stack.
int getMin() retrieves the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2


---------------------------------------------------------------------------------------

Good - T.C O(1) | S.C - O(2N)

Create stack of Array. The minimum is stored in the arr[0] and the val is store in arr[1] thats being pushed onto the stack.

class MinStack {
public:
    stack<array<int, 2>> s;
    MinStack() {
    }
    
    void push(int val) {
        if(s.empty()){
            s.push({val, val});
            return;
        }
        int min = s.top()[0];
        s.push({std::min(min, val), val});
    }
    
    void pop() {
        s.pop();
    }
    
    int top() {
        return s.top()[1];
    }
    
    int getMin() {
        return s.top()[0];
    }
};

----------------------------------------------------------------------------------------------------------------------------------
Best : S.C - O(N)
(i) if(stack is empty, push val to stack and min=val, (ii) if val>min, push it on the stack, (iii) if val< min, push 2*val-min to stack and min=val
(iv) if pop(), remove ele from stack if st.top()>min else min=2*min-st.top() and remove ele from stack
(v) if(st.top()<min) return 2*min-st.top(), else return st.top()

class MinStack {
public:
    stack<long long> st;
    long long int minm;
    MinStack() {
        minm=INT_MAX;
    }
    
    void push(long long int val) {
        if(st.empty()){
            st.push(val);
            minm=val;
        }
        else if(minm<val)
            st.push(val);
        else{
            st.push(2*val-minm);
            minm=val;
        }
    }
    
    void pop() {
        if(st.top()<minm){
            minm=2*minm-st.top();
        }
        st.pop();
    }
    
    long long int top() {
        if(st.top()<minm){
            return minm;
        }
        return st.top();
    }
    
    long long int getMin() {
        return minm;
    }
};

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack* obj = new MinStack();
 * obj->push(val);
 * obj->pop();
 * int param_3 = obj->top();
 * int param_4 = obj->getMin();
 */
