Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:
Search for a node to remove.
If the node is found, delete the node.

Example 1:
Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.

Example 2:
Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.

Example 3:
Input: root = [], key = 0
Output: []

----------------------------------------------------------------------------------------------------------------------------------------

class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
          TreeNode* target = root;
    TreeNode* parent = NULL;
    
    //Search Node
    while (target != NULL && target->val != key) 
    {
        parent = target;
        if (key > target->val) target = target->right;
        else target = target->left;
    }
    
    if (target == NULL) return root;  // not found
    
    
    // Case 1 : No children
    if(target->left==NULL && target->right==NULL)
    {
        if (parent == NULL) return NULL;
        if(target==parent->left) parent->left=NULL;
        else parent->right=NULL;
        return root;
    }
    
    // Case 2 : One Child
    
        // Case 2.1 : No right child
   if(target->right==NULL)
    {
        if (parent == NULL) return target->left; //If target node is root itself
        if (target == parent->left) parent->left = target->left;
        else parent->right = target->left;
        return root;
    }
    
        // Case 2.2 : No left child
    if(target->left==NULL)
    {
        if (parent == NULL) return target->right;
        if (target == parent->left) parent->left = target->right;
        else parent->right = target->right;
        return root;
    }
    
    // Case 3 : Both the child nodes present
    
        /* Whenever we delete a node with two child then we replace that node with the 
		   leftmost element from the right subtree because to hold the property of BST  
		   all the element to the right of the new node will be greater than it and all the 
		   left ones will be lesser than it*/
        
    
        // Trace to the leftmost element in Right subtree
        TreeNode* prev = target;
        TreeNode* p = target->right;
        while (p->left != NULL) 
        {
            prev = p;
            p = p->left;
        }
        
        target->val = p->val;
        if (p == prev->left) prev->left = p->right;
        else prev->right = p->right;
        return root;
    
}
    
};
