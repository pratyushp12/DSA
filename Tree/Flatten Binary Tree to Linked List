Given the root of a binary tree, flatten the tree into a "linked list":

The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.

Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Approach (use Stack, O(N) - TC & SC) push root to stack, loop till stack is not empty,push right child, then push left child, if stack is not empty then curr->right=st.top() &
curr->left=NULL

class Solution {
public:
    void flatten(TreeNode* root) {
        if(root==NULL)
            return;
        stack<TreeNode*> st;
        st.push(root);
        while(!st.empty()){
            TreeNode *node=st.top();
            st.pop();
            if(node->right)
                st.push(node->right);
            if(node->left)
                st.push(node->left);
            if(!st.empty()){
                node->right=st.top();
                node->left=NULL;
            }
            else
                node->left=NULL;
        }
    }
};
