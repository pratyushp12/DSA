Given the root of a binary tree, return the maximum width of the given tree.

The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and rightmost non-null nodes), where the null nodes between the end-nodes 
are also counted into the length calculation.

It is guaranteed that the answer will in the range of 32-bit signed integer.

 

Example 1:


Input: root = [1,3,2,5,3,null,9]
Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).

Input: root = [1,3,5,7,null,6,null]
Output: 3

--------------------------------------------------------------------

class Solution {
public:
 
    
    int widthOfBinaryTree(TreeNode* root) {
        if(root==NULL)
            return 0;
        queue<pair<TreeNode*,int>> q;
        q.push({root,0});
        int res=0;
        while(!q.empty()){
            int size=q.size();
            int minm=q.front().second;
            int first,last;
            for(int i=0;i<size;i++){
            int curr=q.front().second-minm;  
            if(i==0)
                first=curr;
            if(i==size-1)
                last=curr;
            TreeNode *node =q.front().first;
            q.pop();
            if(node->left)
                q.push({node->left,2*curr+1});
            if(node->right)
                q.push({node->right,2*curr+2});
            }
            res=max(res,last-first+1);
        }
        return res;
    }
};
