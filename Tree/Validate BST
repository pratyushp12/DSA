Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.

Example 1:
Input: root = [2,1,3]
Output: true

Example 2:
Input: root = [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.

-------------------------------------------------------------------------------------------------------


Approach : Maintain 2 variable maxVal and minVal for each node and perform recursion TC-O(N), SC-O(1) only recursion stack

class Solution {
public:
    bool isValidBST(TreeNode* root) {
        if(!root->left && !root->right)
            return true;
        return isBST(root, LONG_MIN,LONG_MAX);
    }
    
    bool isBST(TreeNode* root, long minVal, long maxVal){
        if(root==NULL)
            return true;
        if(root->val>=maxVal || root->val<=minVal)
            return false;
        return isBST(root->left,minVal,root->val) && isBST(root->right,root->val,maxVal);
    }
};
