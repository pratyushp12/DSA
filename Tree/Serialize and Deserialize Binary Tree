Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across
a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to
ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.


-----------------------------------------------------------------------------------------------------------
class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        string ans="";
        if(root==NULL)
            return ans;
        queue<TreeNode*> q;
        q.push(root);
        ans+=to_string(root->val)+',';
        while(!q.empty()){
            TreeNode *node=q.front();
            q.pop();
            if(node->left){
                q.push(node->left);
                ans+=to_string(node->left->val);
                ans+=",";}
            else
                ans+="#,";
            if(node->right){
                q.push(node->right);
                ans+=to_string(node->right->val);
                ans+=",";
            }
            else
                ans+="#,";
        }
        return ans;
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        if(data=="")
            return NULL;
        stringstream s(data);
        string str;
        getline(s,str,',');
        TreeNode *root=new TreeNode(stoi(str));
        queue<TreeNode*> q; 
        q.push(root); 
        while(!q.empty()) {
            TreeNode *node = q.front(); 
            q.pop(); 
            getline(s, str, ',');
            if(str == "#") {
                node->left = NULL; 
            }
            else {
                TreeNode* leftNode = new TreeNode(stoi(str)); 
                node->left = leftNode; 
                q.push(leftNode); 
            }
            getline(s, str, ',');
            if(str == "#") {
                node->right = NULL; 
            }
            else {
                TreeNode* rightNode = new TreeNode(stoi(str)); 
                node->right = rightNode;
                q.push(rightNode); 
            }
        }
        return root;
    }
};
