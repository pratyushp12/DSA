Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:

a binary tree in which the left and right subtrees of every node differ in height by no more than 1.

Example 1:

Input: root = [3,9,20,null,null,15,7]  //left to right while drawing BT
Output: true
Example 2:


Input: root = [1,2,2,3,3,null,null,4,4]
Output: false
Example 3:

Input: root = []
Output: true

------------------------------------------------------------------------------------------------------------

Approach 1 : For Each node call the method to calculate it's left and right subtree hight
TC- O(N)*O(N) - i.e height*node_traversal

Approach 2 : While calculating height, if it's more tha n 1 return false till the root
TC - O(N) SC -O(N)

class Solution {
    int BalanceValue(TreeNode *root){
        if(root==NULL)
            return 0;
        int lh=BalanceValue(root->left);
        if(lh==-1) return -1;
        int rh=BalanceValue(root->right);
        if(rh==-1) return -1;
        if(abs(lh-rh)>1)
            return -1;
        return 1+max(lh,rh);
    }
public:
    bool isBalanced(TreeNode* root) {
        if(BalanceValue(root)==-1)
            return false;
        return true;
    }
};
