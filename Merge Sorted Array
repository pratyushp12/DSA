/*
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

The number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.

 

Example 1:

Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]
Example 2:

Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]
*/


//O(n+m) extra space - take extra array of size (m+n) and insert while taking 3 pointer i,j,k and increment with smallest starting from 

class Solution {
public:
    void merge(vector<int>& nums1, int m, vector<int>& nums2, int n) {
        vector<int> res(m+n);
        int i=0,j=0,k=0;
        while(i<m && j<n){
            if(nums1[i]<nums2[j])
                res[k++]=nums1[i++];
            else
                res[k++]=nums2[j++];
        }
        if(i<m){
            for(;i<m;i++)
                res[k++]=nums1[i];
        }
        if(j<n){
            for(;j<n;j++)
                res[k++]=nums2[j];
        }
        for(int i=0;i<n+m;i++)
            nums1[i]=res[i];
    }
};

//O(1) extra space as nums1 is of O(m+n) - start 'k' with last index and m&n as last index of nums1 & nums2

class Solution {
public:
    void merge(int A[], int m, int B[], int n) {
    int i=m-1;
		int j=n-1;
		int k = m+n-1;
		while(i >=0 && j>=0)
		{
			if(A[i] > B[j])
				A[k--] = A[i--];
			else
				A[k--] = B[j--];
		}
		while(j>=0)
			A[k--] = B[j--];
    }
};
