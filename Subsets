/*
Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
*/

//Iterative & recursive in notes

//soln using bit

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>> res;
        int resSize=1<<nums.size();
        
        for(int i=0;i<resSize;i++){
            vector<int> v;
            for(int j=0;j<nums.size();j++){
                if((i & (1<<j))!=0)
                    v.push_back(nums[j]);
            }
            res.push_back(v);
        }
        return res;
    }
};
