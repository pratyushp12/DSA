/*
A peak element is an element that is strictly greater than its neighbors.

Given an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž.

You must write an algorithm that runs in O(log n) time.

 

Example 1:

Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.
Example 2:

Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.
*/

//O(N) - Traverse from 1st index to end-1 & check if index is greater that index-1 & index+1 both, if so return the index

//O(log(N)) - Logic
/*
| 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 |
|---|---|---|---|---|---|---|---|---|
| l | _ | _ | _ | m | _ | _ | _ | r |
a[m] > a[m+1] -> r=m (Not m-1 since m is larger and it itself can be the answer)
| 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 |
|---|---|---|---|---|---|---|---|---|
| l | m | _ | _ | r | X | X | X | X |

a[m] < a[m+1] -> l = m+1 (Since m is smaller than m+1, m will for sure be not the answer)
| 1 | 2 | 3 | 4 | 5 | 4 | 3 | 2 | 1 |
|---|---|---|---|---|---|---|---|---|
| X | X | l | m | r | X | X | X | X |

a[m] < a[m+1] -> l = m+1 (Since m is smaller than m+1, m will for sure be not the answer)
| 1 | 2 | 3 | 4 | 5   | 4 | 3 | 2 | 1 |
|---|---|---|---|-----|---|---|---|---|
| X | X | X | X | l,r | X | X | X | X |

l is the answer

More :

Most people have figured out the binary search solution but are not able to understand how its working. I will try to explain it simply. What we are essentially doing is going
in the direction of the rising slope(by choosing the element which is greater than current). How does that guarantee the result? Think about it, there are 2 possibilities.
a) rising slope has to keep rising till end of the array b) rising slope will encounter a lesser element and go down.
In both scenarios we will have an answer. In a) the answer is the end element because we take the boundary as -INFINITY b) the answer is the largest element before the slope
falls. Hope this makes things clearer.
*/

//code
class Solution {
public:
    int findPeakElement(vector<int>& nums) {
        int l=0,r=nums.size()-1;
        int mid;
        while(l<=r){
            mid=(l+r)/2;
            if(l==r)
                return l;
            else if(nums[mid]>nums[mid+1])
                r=mid;
                
            else
                l=mid+1;
        }
        return -1;
    }
};
