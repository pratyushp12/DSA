/*
Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

 

Example 1:

Input: nums = [1,3,4,2,2]
Output: 2
Example 2:

Input: nums = [3,1,3,4,2]
Output: 3
Example 3:

Input: nums = [1,1]
Output: 1
Example 4:

Input: nums = [1,1,2]
Output: 1

Input: nums = [2,2,2,2,2]
Output: 2
*/

//Logic 1 : modifies the array, check nums[abs(nums[i])] : (i) if >0 the just minus it to the same value (ii) if -ve then return nums[i] ------ O(N) time & O(1) space

class Solution {
public:
    int findDuplicate(vector<int>& nums) {
        int n=nums.size();
        for(int i=0;i<n;i++){
            if(nums[abs(nums[i])]>0)
                nums[abs(nums[i])]=-nums[abs(nums[i])];
            else
                return abs(nums[i]);
        }
        return 0;
    }
    
};

//Efficient : i.e without modifying the array --- Use two pointers the fast and the slow. The fast one goes forward two steps each time, while the slow one goes only step 
//each time. They must meet the same item when slow==fast. In fact, they meet in a circle, the duplicate number must be the entry point of the circle when visiting the array 
//from nums[0].

int findDuplicate3(vector<int>& nums)
{
	if (nums.size() > 1)
	{
		int slow = nums[0];
		int fast = nums[nums[0]];
		while (slow != fast)
		{
			slow = nums[slow];
			fast = nums[nums[fast]];
		}

		fast = 0;
		while (fast != slow)
		{
			fast = nums[fast];
			slow = nums[slow];
		}
		return slow;
	}
	return -1;
}

