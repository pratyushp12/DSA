/*
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the 
intervals in the input. 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

*/

//O(n^2) - sort the intervals then start from 1st interval and check with all other intervals and do similar for all other elements.

//O(nlogn) - sort the array and select start = interval[0] and iterate over interval and check if(start[1]>=it[0]) then start[1]=max(start[1],it[1]), else add the start to the 
result

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        vector<vector<int>> res;
        if(intervals.size()==0)
            return res;
        sort(intervals.begin(),intervals.end());
        vector start=intervals[0];
        for(auto it:intervals){
            if(it[0]<=start[1])
                start[1]=max(start[1],it[1]);
            else{
            
                res.push_back(start);
                start=it;
            }
        }
        res.push_back(start);
        return res;
    }
};
